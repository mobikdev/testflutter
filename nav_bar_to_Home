import 'dart:async';
import 'dart:convert';

import 'package:QuixiCareService/cutom_widgets/InProgress.dart';
import 'package:QuixiCareService/cutom_widgets/cancel.dart';
import 'package:QuixiCareService/cutom_widgets/completed.dart';
import 'package:QuixiCareService/cutom_widgets/new_orders.dart';
import 'package:QuixiCareService/cutom_widgets/rejected.dart';
import 'package:flutter/material.dart';
import 'package:flutter_ringtone_player/flutter_ringtone_player.dart';
import 'package:flutter_switch/flutter_switch.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:lottie/lottie.dart';
import 'package:QuixiCareService/cutom_widgets/button.dart';
import 'package:QuixiCareService/uiltis/color.dart';
import 'package:QuixiCareService/view/add_product/notificationn.dart';
import 'package:QuixiCareService/view/qr_code.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'add_product/driverassign.dart';
import 'order_detail.dart';

class Home extends StatefulWidget {
  const Home({super.key});


  @override
  State<Home> createState() => _HomeState();
}

class _HomeState extends State<Home> with SingleTickerProviderStateMixin {
  String? retrievedId;
  int? status;
  final shopName = ''.obs;
  late TabController _tabController;
  var tabc = 0;



  @override
  void initState() {
    super.initState();
   // setState(() {
    //  tabc=widget.tabindx;
    //});
    _tabController = TabController(length: 5, vsync: this);
    _tabController.addListener(_handleTabSelection);
  }

  void _handleTabSelection() {
    print("Current tab index: ${_tabController.index}");
    tabc = _tabController.index;
    setState(() {});
  }

  @override
  void dispose() {
    _tabController.removeListener(_handleTabSelection);
    _tabController.dispose();
    super.dispose();
  }

  void ring() {
    FlutterRingtonePlayer.play(
      fromAsset: "assets/sound/Old.mp3",
      looping: false,
      volume: 2,
      asAlarm: false,
    );
    Future.delayed(const Duration(seconds: 5), () {
      FlutterRingtonePlayer.stop();
    });
  }

  bool isSelect = false;
  String urll = "";
  String shopnameee = "";

  //final GlobalKey<RefreshIndicatorState> _refreshIndicatorKeys = GlobalKey<RefreshIndicatorState>();

  Future<void> refreshData() async {
    //await listhome();
    //Shopnaem();
    //rejectOrder();
    // flatdel();
    //setState(() {});
  }

  int previousLength = 0;

  void loadPreviousLength() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      previousLength = prefs.getInt('previousLength') ?? 0;
    });
  }

  void savePreviousLength(int newLength) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      previousLength = newLength;
    });
    prefs.setInt('previousLength', newLength);
  }

  Widget tabItem(String title, int ind) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 5, horizontal: 0),
      child: Container(
        decoration: BoxDecoration(
            color: colors.white,
            borderRadius: BorderRadius.circular(10),
            boxShadow: [
              BoxShadow(
                  color: Colors.grey.withOpacity(0.4),
                  spreadRadius: 2,
                  blurRadius: 2)
            ]),
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Text(
            title,
            style: TextStyle(
                // color: colors.white,
                color: ind == tabc ? colors.button_color : colors.black,
                fontSize: 14,
                fontWeight: FontWeight.bold),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // var ind = _tabController.index;
    final h = MediaQuery.of(context).size.height;
    final w = MediaQuery.of(context).size.width;
    return Scaffold(
      // backgroundColor: colors.button_color,
      appBar: AppBar(
        automaticallyImplyLeading: false,
        backgroundColor: colors.button_color,

        title: const Center(
          child: Text(
            "Orders",
            style: TextStyle(
                fontSize: 18, color: colors.white, fontWeight: FontWeight.bold),
          ),
        ),


      ),
      body: SingleChildScrollView(
        physics: const NeverScrollableScrollPhysics(),
        child: Column(
          children: [
            /*    Container(
                  child: Padding(
                    padding: const EdgeInsets.all(10.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: [
                        const Text("Shop Status ",
                            style: TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                                fontSize: 17)),

                      ],
                    ),
                  ),
                ),*/
            SizedBox(
              height: h / 80,
            ),
            Container(
              width: w,
              height: h / 14,
              child: TabBar(
                controller: _tabController,
                automaticIndicatorColorAdjustment: true,
                isScrollable: true,
                splashBorderRadius: BorderRadius.circular(10),
                indicatorColor: Colors.redAccent.shade700,
                labelPadding: const EdgeInsets.symmetric(horizontal: 10),
                indicator: UnderlineTabIndicator(
                  borderRadius: BorderRadius.circular(15),
                  borderSide: const BorderSide(width: 4, color: Colors.white),
                ),
                tabAlignment: TabAlignment.center,
                tabs: [
                  // Text(
                  //   " All Order",
                  //   style: TextStyle(
                  //       color: colors.white,
                  //       fontSize: 14,
                  //       fontWeight: FontWeight.bold),
                  // ),

                  tabItem("New Booking", 0),
                  tabItem("In Progress", 1),
                  tabItem("Completed", 2),
                  tabItem("Rejected", 3),
                  tabItem("Cancel", 4),


                ],
              ),
            ),

           /*
            RefreshIndicator(
              key: _refreshIndicatorKeys,
              backgroundColor: Colors.white,
              color: Colors.green,
              displacement: BorderSide.strokeAlignCenter,
              onRefresh: () => refreshData(),
              child: SingleChildScrollView(
                physics: const AlwaysScrollableScrollPhysics(),
                child: Container(
                  color: colors.scaffold_background_color,
                  height: h / 1.3,
                  width: w,
                  child: Padding(
                    padding: const EdgeInsets.only(
                      left: 20.0,
                      right: 20,
                      top: 20,
                      bottom: 60,
                    ),
                    child: TabBarView(
                      controller: _tabController,
                      children: const [
                        NewOrderWidget(),
                        InProgressWidget(),
                        CompletedWidget(),
                        RejectedWidget(),
                        CancelWidget(),

                      ],
                    ),
                  ),
                ),
              ),
            )
           */

            Container(
              color: colors.scaffold_background_color,
              height: h / 1.3,
              width: w,
              child: Padding(
                padding: const EdgeInsets.only(
                  left: 20.0,
                  right: 20,
                  //top: 20,
                  //bottom: 60,
                  top:5,
                  bottom: 20,
                ),
                child: TabBarView(
                  controller: _tabController,
                  children: const [
                    NewOrderWidget(),
                    InProgressWidget(),
                    CompletedWidget(),
                    RejectedWidget(),
                    CancelWidget(),

                  ],
                ),
              ),
            ),







          ],
        ),
      ),
    );
  }

  //assets/image/rejectedorders.png
  String? singleOrderDate;
  int? grandTotal;
  String? Priceee;
  String? Orderidd;
  String? userid;
  List<Map<String, dynamic>> yourDataList = [];

  Future<void> listhome() async {
    final String apiUrl =
        'http://103.104.74.215:3026/needoo/digital/shop_order_list';

    final response = await http.post(
      Uri.parse(apiUrl),
      body: {
        "shopId": retrievedId.toString(),
      },
    );

    if (response.statusCode == 200) {
      final Map<String, dynamic> data = json.decode(response.body);
      print(response.body);
      //print("-----------------------------");

      if (data.containsKey('data')) {
        List<dynamic> orderList = data['data'];

        setState(() {
          yourDataList.clear();
        });

        for (var order in orderList) {
          if (order.containsKey('order_date')) {
            singleOrderDate = order['order_date'];
            Orderidd = order['orderId'];
            userid = order['userId'];
            Priceee = order['grand_total'].toString();
            grandTotal = int.tryParse(Priceee ?? '');
          }

          if (order.containsKey('products')) {
            List<dynamic> products = order['products'];
            List<Map<String, dynamic>> productList = [];

            for (var product in products) {
              if (product.containsKey('product_name') &&
                  product.containsKey('variants')) {
                String productName = product['product_name'];
                String variant = product['variants'];

                productList.add({
                  "name": productName,
                  "quantity": variant,
                });
              }
            }

            setState(() {
              yourDataList.add({
                "orderNumbertt": order['order_no'].toString(),
                "orderNumber": Orderidd ?? "",
                "userid": userid ?? "",
                "price": Priceee ?? "",
                "date": singleOrderDate ?? "",
                "items": productList,
                "vendorStatus": order['vender_status'],
                "orderStatus": order['order_status'],
                "driverAssignStatus": order['driver_assign_status'],
              });
            });
          }
        }
      }
    } else {
      print('Request failed');
    }
  }

  Future<void> orderstatus(
      String action, String orderId, String useridforaccept) async {
    if (orderId == null) {
//////////
      return;
    }

    final String apiUrl =
        'http://103.104.74.215:3026/needoo/digital/update_order_status';
    final Map<String, String> headers = {'Content-Type': 'application/json'};

    final Map<String, String> data = {
      'orderId': orderId,
      'userId': useridforaccept.toString(),
      'order_status': (action == 'Accept') ? 'In Progress' : 'Cancel',
      'vender_status': (action == 'Accept') ? 'accept' : 'reject',
    };

    final String requestBody = json.encode(data);
    print('Request Body: $requestBody');

    try {
      final response = await http.post(Uri.parse(apiUrl),
          headers: headers, body: requestBody);
      print('Response Status Code: ${response.statusCode}');
      print('Response Body: ${response.body}');

      if (response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        print('Decoded Response: $jsonResponse');
        await listhome();
      } else {
        print("API request failed with status code: ${response.statusCode}");
      }
    } catch (e) {
      print("Error in orderstatus: $e");
    }
  }

  Future checkStatus() async {
    var response = await http.post(
        Uri.parse("http://103.104.74.215:3026/needoo/digital/getStatus"),
        body: {"shopId": retrievedId});
    var res_data = json.decode(response.body);
    print(response.body);
    print(res_data);
    if (response.statusCode == 200 &&
        res_data["result"].toString() == "true".toString()) {
      final status = res_data['data']['status'];
      if (status == 1) {
        setState(() {
          print(status);
          isSelect = false;
        });
      } else {
        setState(() {
          print(status);
          isSelect = true;
        });
      }
    } else {
      print("Not Found");
    }
  }

  Future Opnclose() async {
    const String apiUrl =
        'http://103.104.74.215:3026/needoo/digital/shopOpen_close';
    final Map<String, dynamic> data = {
      'shopId': retrievedId,
    };

    final response = await http.post(
      Uri.parse(apiUrl),
      headers: {
        'Content-Type': 'application/json',
      },
      body: jsonEncode(data),
    );

    if (response.statusCode == 200) {
      print("Response: ${response.body}");
    } else {
      print("Error: ${response.statusCode}");
    }
  }

  Future OpncloseManually() async {
    const String apiUrl =
        'http://103.104.74.215:3026/needoo/digital/manually_open_close';
    final Map<String, dynamic> data = {
      'shopId': retrievedId,
    };

    final response = await http.post(
      Uri.parse(apiUrl),
      headers: {
        'Content-Type': 'application/json',
      },
      body: jsonEncode(data),
    );

    if (response.statusCode == 200) {
      print("Response: ${response.body}");
      print("Check the Status true or not");
      print(data);
    } else {
      print("Error: ${response.statusCode}");
    }
  }

  Future Shopnaem() async {
    final String apiUrl =
        'http://103.104.74.215:3026/needoo/digital/getVenderProfile';
    final Map<String, String> headers = {
      'Content-Type': 'application/json',
    };

    final Map<String, String> data = {
      'shopId': retrievedId!,
    };

    final String requestBody = json.encode(data);
    try {
      final response = await http.post(Uri.parse(apiUrl),
          headers: headers, body: requestBody);

      if (response.statusCode == 200) {
        //print("***********************************shopnamehome*****************************************************");
        // print("Response: ${response.body}");
        final jsonResponse = json.decode(response.body);
        shopnameee = jsonResponse['data']['shop_name'];
        urll = jsonResponse['data']['shop_image'][0];
        //print("----------------------------");
        //print("$shopnameee");
        //print("$urll");
        //print("----------------------------");
      } else {
        print("API request failed with status code: ${response.statusCode}");
      }
    } catch (e) {
      print("Error: $e");
    }
  }

  List<Map<String, dynamic>> orders = [];

  Future<void> rejectOrder() async {
    const String apiUrl =
        'http://103.104.74.215:3026/needoo/digital/reject_order_list';
    final Map<String, dynamic> data = {
      'shopId': retrievedId,
    };

    final response = await http.post(
      Uri.parse(apiUrl),
      headers: {
        'Content-Type': 'application/json',
      },
      body: jsonEncode(data),
    );

    if (response.statusCode == 200) {
      print(response.body);
      final List<dynamic> responseData = jsonDecode(response.body)['data'];
      setState(() {
        orders = List<Map<String, dynamic>>.from(responseData);
      });
    } else {
      print("Error: ${response.statusCode}");
    }
  }
}
