import 'dart:convert';
import 'dart:io';

import 'package:dotted_border/dotted_border.dart';
import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;

import 'package:image_picker/image_picker.dart';
import 'package:intl_phone_field/intl_phone_field.dart';
import 'package:QuixiCareService/cutom_widgets/signup_textfilled.dart';
import 'package:QuixiCareService/view/add_product/maptest.dart';
import 'package:QuixiCareService/view/login.dart';
import 'package:QuixiCareService/view/signup%20form/signup_form1.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert' as convert;
import '../../uiltis/color.dart';
import 'Mapnew.dart';
//import 'Mapscreen.dart';
import 'package:QuixiCareService/view/signup%20form/google_place_autocomplete.dart';



class Signup extends StatefulWidget {



  Signup({key});

  @override
  State<Signup> createState() => _SignupState();
}

class _SignupState extends State<Signup> {

  bool _isInAsyncCall = false;


  String place_id="";
  bool isLoading = false;
  var address = "";


  File? _logoImage;
  File? _coverImage;
  int k = 0;
  var ll = 10;

  //LoginController controllerx =  Get.put(LoginController());

  final ImagePicker _picker = ImagePicker();

  Future<void> _getImageFromCamera(ImageSource source, bool isLogo) async {
    final XFile? pickedFile = await _picker.pickImage(source: source);
    if (pickedFile != null) {
      setState(() {
        if (isLogo) {
          _logoImage = File(pickedFile.path);
        } else {
          _coverImage = File(pickedFile.path);
        }
      });
    }
  }

  //----------------- New TextFeild------------

  TextEditingController legalName = TextEditingController();
  TextEditingController mobileNo = TextEditingController();
  TextEditingController emailID = TextEditingController();
  TextEditingController location = TextEditingController();
  TextEditingController anotherAddress = TextEditingController();
  FocusNode legalName_FocusNode = FocusNode();
  FocusNode mobileNo_FocusNode = FocusNode();
  FocusNode emailID_FocusNode = FocusNode();
  FocusNode location_FocusNode = FocusNode();
  FocusNode anotherAddress_FocusNode = FocusNode();


  @override
  void initState() {
    super.initState();
    print("addresss......$address");
  }

  IconData currentIcon = Icons.add;

  // String getFormattedTime(TimeOfDay time) {
  //   int hour = time.hourOfPeriod;
  //   int minute = time.minute;
  //   String period = time.period == DayPeriod.am ? 'AM' : 'PM';
  //   return '$hour:$minute $period';
  // }
  String getFormattedTime(TimeOfDay time) {
    int hour = time.hour;
    int minute = time.minute;
    String period = time.period == DayPeriod.am ? 'AM' : 'PM';

    String formattedHour = hour < 10 ? '0$hour' : '$hour';
    String formattedMinute = minute < 10 ? '0$minute' : '$minute';

    return '$formattedHour:$formattedMinute $period';
  }

/*
  Future<void> _submitForm1() async {
    try {
      final Uri apiUrl =
          Uri.parse('http://103.104.74.215:3026/needoo/digital/vender_signup');
      final request = http.MultipartRequest('POST', apiUrl);

      request.fields['mobile'] = mobile.text;
      SharedPreferences prefs = await SharedPreferences.getInstance();
      prefs.setString('userMobile', mobile.text);
      request.fields['shop_name'] = shop_name.text;
      request.fields['open_time'] = getFormattedTime(selectedOpenTime!);
      request.fields['close_time'] = getFormattedTime(selectedOpenTime1!);
      request.fields['shop_address'] = addressmap.toString();

      request.fields['email'] = emaillllllll.text.toString();
      request.fields['legal_name'] = legal_nameee.text.toString();

      // Additional -------------

      request.fields['latitude'] = latitudemap.toString();
      request.fields['longitude'] = longitudemap.toString();

      print('Latitude: $latitudemap');
      print('Longitude: $longitudemap');

      if (_coverImage != null) {
        final coverImageFile = await http.MultipartFile.fromPath(
          'shop_image',
          _coverImage!.path,
          contentType: MediaType(
            'image',
            'jpeg',
          ),
        );
        request.files.add(coverImageFile);
      }

      if (_logoImage != null) {
        final logoImageFile = await http.MultipartFile.fromPath(
          'shop_image',
          _logoImage!.path,
          contentType: MediaType('image', 'jpeg'),
        );
        request.files.add(logoImageFile);
      }

      // Optional Fields -------------

      if (selectedOpenTime2 != null) {
        request.fields['o_time'] = getFormattedTime(selectedOpenTime2!);
      }

      if (selectedOpenTime3 != null) {
        request.fields['c_time'] = getFormattedTime(selectedOpenTime3!);
      }

      if (adi_add.text.isNotEmpty) {
        request.fields['addr'] = adi_add.text.toString();
      }

      if (adi_add.text.isNotEmpty) {
        request.fields['shop_no'] = shonum.text.toString();
      }

      if (adi_add.text.isNotEmpty) {
        request.fields['area'] = areaof.text.toString();
      }

      final response = await request.send();
      final responseString = await response.stream.bytesToString();
      if (response.statusCode == 200) {
        print('Data uploaded successfully');
        await UserProgressHelper.setUserProgress(1);


        print('Response Data: $responseString');
      } else {
        Map<String, dynamic> responseData = json.decode(responseString);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            backgroundColor: Colors.red,
            content: Text(responseData["message"]),
          ),
        );
      }
    } catch (e) {
      print('Errorunderapi: $e');
    }
  }
*/

  @override
  Widget build(BuildContext context) {
    final h = MediaQuery.of(context).size.height;
    final w = MediaQuery.of(context).size.width;
    return Scaffold(
      backgroundColor: colors.scaffold_background_color,
      appBar: AppBar(
        backgroundColor: colors.white,
        elevation: 0,
        centerTitle: true,
        title: const Text(
          "Vendor Signup",
          style: TextStyle(fontWeight: FontWeight.w500, color: colors.black),
        ),
        leading: IconButton(
          onPressed: () {
            Navigator.pushReplacement(
                context,
                MaterialPageRoute(
                  builder: (context) => const Login(),
                ));
          },
          icon: const Icon(
            Icons.arrow_back,
            color: colors.black,
          ),
        ),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [



              const SizedBox(height: 30),
              const Text("Legal Name*",
                  style: TextStyle(color: Colors.black87, fontSize: 14)),
              const SizedBox(height: 10),
              Signup_textfilled(
                textfilled_height: 17,
                textfilled_weight: 1,

                textcont: legalName,
                length: 50,
                keytype: TextInputType.name,
                hinttext: "Legal Name",

              ),

              const SizedBox(height: 30),
              const Text("Mobile Number*",
                  style: TextStyle(color: Colors.black87, fontSize: 14)),
              const SizedBox(height: 10),
              IntlPhoneField(
                onCountryChanged: (value) {
                  setState(() {
                    ll = value.maxLength;
                  });
                },
                controller:mobileNo,
                flagsButtonPadding: const EdgeInsets.all(8),
                decoration: const InputDecoration(
                  hintText: "Mobile Number",
                  filled: true,
                  fillColor: Colors.white,
                  border: OutlineInputBorder(
                    borderSide: BorderSide.none,
                  ),
                  contentPadding: EdgeInsets.symmetric(vertical: 12),
                ),
                initialCountryCode: 'IN',
                onSubmitted: (phone) {
                  if (phone != null && phone.contains(RegExp(r'[0-5]'))) {
                    // Entered number contains 0, 1, 2, 3, 4, or 5
                    ScaffoldMessenger.of(context).showSnackBar(new SnackBar(
                        content: new Text("Please enter a valid mobile number")
                    ));
                  }
                },
              ),

              const Text("Email Id*",
                  style: TextStyle(color: Colors.black87, fontSize: 14)),
              const SizedBox(height: 10),
              Signup_textfilled(
                textfilled_height: 17,
                textfilled_weight: 1,
                textcont: emailID,
                length: 1050,
                keytype: TextInputType.emailAddress,
                hinttext: "Email Id",
              ),

              const SizedBox(height: 30),
              const Text("Choose Your Shop Location*",
                  style: TextStyle(color: Colors.black87, fontSize: 14)),
              const SizedBox(height: 10),

              GestureDetector(
                onTap: () async {

                  Position position = await Geolocator.getCurrentPosition(
                    desiredAccuracy: LocationAccuracy.high,
                  );
                  double latitude = position.latitude;
                  double longitude = position.longitude;
                  latitudemap = position.latitude;
                  longitudemap = position.longitude;

                  /*
                  final  result = await Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => MapScreen1(
                      lat: latitude,
                      lon: longitude,
                    )),
                  );

                   */

                  final  result = await Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) =>

                      //  SimpleMap(
                     // lat: latitude,
                     // lon: longitude,
                   // )

                        GoogleMapSearchPlacesApi()


                    ),
                  );






                 /* Get.to(() => MapScreen1(
                    lat: latitude,
                    lon: longitude,
                  ));*/
                  if (result != null) {
                    setState(() {
                      address = result["description"];
                      //anotherAddress.text = address;
                      place_id = result["place_id"];

                    });

                    print('Returned data: $address');
                  }
                },
                child:
                  Column(
                    children: [
                      address.isEmpty?
                        Container(
                          padding:
                          const EdgeInsets.symmetric(
                              horizontal: 25, vertical: 17),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(10),
                            border: Border.all(color: Colors.grey, width: 1),
                          ),
                          child: Row(

                            children: [
                              Text("")
                            ],
                          ),
                        ):
                      Container(
                        width:double.infinity,
                        padding:
                        const EdgeInsets.symmetric(
                            horizontal: 25, vertical: 17),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(10),
                          border: Border.all(color: Colors.grey, width: 1),
                        ),
                        child:
                            Text(address, softWrap: true , maxLines: null)

                      ),


                    ],
                  )
              ),

              const SizedBox(height: 30),
              const Text("Add the complete Address",
                  style: TextStyle(color: Colors.black87, fontSize: 14)),
              const SizedBox(height: 10),
              Signup_textfilled(
                textfilled_height: 17,
                textfilled_weight: 1,
                textcont: anotherAddress,
                length: 1050,
                keytype: TextInputType.text,
                hinttext: "Building",

              ),




              const SizedBox(height: 30),

              const SizedBox(height: 30),
              // Button_widget(
              //   buttontext: "Next",
              //   button_height: 20,
              //   button_weight: 1,
              //   onpressed: () async {
              //     if (mobile.text.isEmpty || shop_name.text.isEmpty ||
              //         addressmap!.isEmpty || emaillllllll.text.isEmpty ||
              //         legal_nameee.text.isEmpty || selectedOpenTime == null ||
              //         selectedOpenTime1 == null || _logoImage == null ||
              //         _coverImage == null) {
              //       ScaffoldMessenger.of(context).showSnackBar(
              //         SnackBar(
              //           content: Text(
              //               'Please fill in all required fields and select images'),
              //         ),
              //       );
              //       return;
              //     }
              //     if (mobile.text.length != 10) {
              //       ScaffoldMessenger.of(context).showSnackBar(
              //         SnackBar(
              //           content: Text('Mobile number should be 10 digits'),
              //         ),
              //       );
              //       return;
              //     }
              //
              //     if (RegExp(r'^[0-5]').hasMatch(mobile.text)) {
              //       if (RegExp(r'^[789]\d{9}$').hasMatch(mobile.text)) {
              //         ScaffoldMessenger.of(context).showSnackBar(
              //           SnackBar(
              //             content: Text('Invalid Indian mobile number'),
              //           ),
              //         );
              //         return;
              //       } else {
              //         ScaffoldMessenger.of(context).showSnackBar(
              //           SnackBar(
              //             content: Text('Invalid mobile number'),
              //           ),
              //         );
              //         return;
              //       }
              //     }
              //
              //     _submitForm1();
              //     // await UserProgressHelper.setUserProgress(1);
              //     // Navigator.pushReplacement(
              //     //   context,
              //     //   MaterialPageRoute(builder: (context) => Signup_form1()),
              //     // );
              //   },
              // ),

              isLoading == true ? Center(child: CircularProgressIndicator()) :
              Container(
                width: double.infinity,
                height: 50,
                child:
               // isLoading == true ? Center(child: CircularProgressIndicator()) :

                ElevatedButton(
                  onPressed: () async {
                      if (mobileNo.text.isEmpty ||
                          address.isEmpty ||
                          emailID.text.isEmpty ||
                          legalName.text.isEmpty
                        ) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                          content: Text(
                              'Please fill in all required fields '),
                        ),
                      );
                      return;
                    }else {

                         setState(() {
                           isLoading=true;
                         });
                         requestSignUp(context, legalName.text, emailID.text, mobileNo.text,
                            "$latitudemap", "$longitudemap", anotherAddress.text);
                      }
                   /* if (mobile.text.length != 10) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                          content: Text('Mobile number should be 10 digits'),
                        ),
                      );
                      return;
                    }

                    if (RegExp(r'^[0-5]').hasMatch(mobile.text)) {
                      if (RegExp(r'^[789]\d{9}$').hasMatch(mobile.text)) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text('Invalid Indian mobile number'),
                          ),
                        );
                        return;
                      } else {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text('Invalid mobile number'),
                          ),
                        );
                        return;
                      }
                    }*/

                  /*  Navigator.pushReplacement(
                      context,
                      MaterialPageRoute(builder: (context) => Signup_form1()),
                    );*/
                  },
                  style: ButtonStyle(
                    foregroundColor:

                    MaterialStateProperty.resolveWith<Color>(
                          (Set<MaterialState> states) {
                        if (
                            mobileNo.text.isEmpty ||
                            address.isEmpty ||
                            emailID.text.isEmpty ||
                            legalName.text.isEmpty


                        // mobile.text.isEmpty ||
                        //   shop_name.text.isEmpty ||
                        // addressmap!.isEmpty ||
                        //  emaillllllll.text.isEmpty ||
                        //  legal_nameee.text.isEmpty ||
                        //  selectedOpenTime == null ||
                        //  selectedOpenTime1 == null ||
                        //   _logoImage == null ||
                        //   _coverImage == null
                        ) {
                          return Colors.purple;
                        }
                        return Colors.white;
                      },
                    ),




                    backgroundColor:

                    MaterialStateProperty.resolveWith<Color>(
                      (Set<MaterialState> states) {
                        if (
                        mobileNo.text.isEmpty ||
                            address.isEmpty ||
                            emailID.text.isEmpty ||
                            legalName.text.isEmpty


                           // mobile.text.isEmpty ||
                         //   shop_name.text.isEmpty ||
                           // addressmap!.isEmpty ||
                          //  emaillllllll.text.isEmpty ||
                          //  legal_nameee.text.isEmpty ||
                          //  selectedOpenTime == null ||
                         //  selectedOpenTime1 == null ||
                         //   _logoImage == null ||
                         //   _coverImage == null
                        ) {
                          return Colors.grey;
                        }
                        return Colors.green;
                      },
                    ),
                  ),
                  child:
                  //isLoading ? CircularProgressIndicator(color: colors.button_color,):
                  Text("Next" , style: TextStyle(fontSize: 20)),
                ),
              ),

              const SizedBox(height: 20),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Text(
                    "Already have an account?",
                    style: TextStyle(
                        fontSize: 15,
                        color: colors.hintext_shop,
                        fontWeight: FontWeight.normal),
                  ),
                  TextButton(
                    child: const Text("Login",
                        textAlign: TextAlign.justify,
                        style: TextStyle(
                            color: colors.button_color,
                            fontWeight: FontWeight.w600)),
                    onPressed: () {
                      Get.to(const Login());
                    },
                  )
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }


  bool isMapOpening = false;

  // Future<void> getCurrentLocation() async {
  //   print("Get Current Location");
  //   try {
  //     LocationPermission permission = await Geolocator.checkPermission();
  //     if (permission == LocationPermission.denied ||
  //         permission == LocationPermission.deniedForever) {
  //       permission = await Geolocator.requestPermission();
  //     }

  //     if (permission == LocationPermission.whileInUse ||
  //         permission == LocationPermission.always) {
  //       try {
  //         Position position = await Geolocator.getCurrentPosition(
  //           desiredAccuracy: LocationAccuracy.high,
  //         );
  //         double latitude = position.latitude;
  //         double longitude = position.longitude;

  //         // Save the latitude and longitude to SharedPreferences
  //         SharedPreferences prefs = await SharedPreferences.getInstance();
  //         await prefs.setDouble('latitude', latitude);
  //         await prefs.setDouble('longitude', longitude);

  //         print('Latitude: $latitude, Longitude: $longitude');

  //         // Navigate to the GmapState screen
  //         Navigator.push(
  //           context,
  //           MaterialPageRoute(builder: (context) => GmapStatetest()),
  //         ).then((result) {
  //           if (result != null) {
  //             setState(() {
  //               latitudemap = result['latitude'];
  //               longitudemap = result['longitude'];
  //               addressmap = result['address'];
  //             });
  //           }
  //         });
  //       } catch (e) {
  //         print('Error getting current location: $e');
  //       }
  //     }
  //   } catch (e) {
  //     print(e);
  //   }
  // }

  double? latitudemap;

  double? longitudemap;

  String? addressmap;

  TextEditingController mobile = TextEditingController();
  TextEditingController shop_name = TextEditingController();
  TextEditingController o_time = TextEditingController();
  TextEditingController c_time = TextEditingController();
  TextEditingController adi_add = TextEditingController();

  TextEditingController shonum = TextEditingController();
  TextEditingController areaof = TextEditingController();

  TextEditingController legal_nameee = TextEditingController();
  TextEditingController emaillllllll = TextEditingController();
  bool isRowVisible = false;

  TimeOfDay? selectedOpenTime;
  TimeOfDay? selectedOpenTime1;

  TimeOfDay? selectedOpenTime2;
  TimeOfDay? selectedOpenTime3;

  void _showWarningDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Warning'),
          content: const Text(
              'Please enter the time after the previous close time.'),
          actions: <Widget>[
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('OK'),
            ),
          ],
        );
      },
    );
  }

  bool _isBefore(TimeOfDay time1, TimeOfDay time2) {
    final DateTime dateTime1 = DateTime(2023, 1, 1, time1.hour, time1.minute);
    final DateTime dateTime2 = DateTime(2023, 1, 1, time2.hour, time2.minute);
    return dateTime1.isBefore(dateTime2);
  }

  //---------------API Calling----------------

  Future<void> requestSignUp(
      BuildContext context,
      String name,
      String email,
      String phone,
      String lat,
      String long,
      String address,
      ) async {
    String msg;
    SharedPreferences prefs = await SharedPreferences.getInstance();

    final Uri uri = Uri.parse("https://logicalsofttech.com/QuixiCare/Vendor_api/vendor_signup");
    final map = <String, dynamic>{};
    map['name'] = name;
    map['mobile'] = phone;
    map['email_id'] = email;
    map['lat'] = lat;
    map['long'] = long;
    map['address'] = address;





    print("name="+name);
    print("mobile="+phone);
    print("email_id="+email);
    print("lat="+lat);
    print("long="+long);
    print("address="+address);



    try {

      final response = await http.post(uri, body:map);

      final Map<String,dynamic> res = json.decode(response.body);
      //List<dynamic> body = [];
     // if(res["result"] == "true") {
      //  body = res["data"];

     // }
     // else {

      //  msg = res["msg"];

      //}
     // print(body);


     // var response = await request.send();
     // var responseStream = await response.stream.bytesToString();
     // var jsonResponse = jsonDecode(responseStream);
     // print("signup1="+jsonResponse);

      if (res['result'] == 'true') {
        var userId = res['data']['id'];

        setState(() {
          isLoading=false;
        });

       // prefs.setString("result", res['result']);
        prefs.setString("userid", userId);
       // await UserProgressHelper.setUserProgress(1);
        Navigator.pushAndRemoveUntil(context,  MaterialPageRoute(
            builder: (_) => Signup_form1()), (route) => false);
       // Get.snackbar("Note", res['msg']);
        Get.snackbar("Note", "Personal Details updated successfully");
      } else {
       // prefs.setBool("isLogin", false);
        Get.snackbar("Error Note", res['msg']);
      }
    } on SocketException catch (e) {
      Get.snackbar('Exception', e.toString());
    } on FormatException catch (e) {
      Get.snackbar('Exception', e.toString());
    } catch (e) {
      Get.snackbar('Exception', e.toString());
    }
  }


/*
  Future<void> requestSignUp(
      BuildContext context,
      String name,
      String email,
      String phone,
      String lat,
      String long,
      String address,
      ) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();

    var request = http.MultipartRequest(
      'POST',
      Uri.parse('https://logicalsofttech.com/QuixiCare/Vendor_api/vendor_signup'),
    );
    request.fields['name'] = name;
    request.fields['mobile'] = phone;
    request.fields['email_id'] = email;
    request.fields['lat'] = lat;
    request.fields['long'] = long;
    request.fields['address'] = address;

    print("name="+name);
    print("mobile="+phone);
    print("email_id="+email);
    print("lat="+lat);
    print("long="+long);
    print("address="+address);



    try {
      var response = await request.send();
      var responseStream = await response.stream.bytesToString();
      var jsonResponse = jsonDecode(responseStream);
      print("signup1="+jsonResponse);

      if (jsonResponse['result'] == 'true') {
        var userId = jsonResponse['data']['id'];

        prefs.setString("result", jsonResponse['result']);
        prefs.setString("userid", userId);
        await UserProgressHelper.setUserProgress(1);
        Navigator.pushAndRemoveUntil(context,  MaterialPageRoute(
            builder: (_) => Signup_form1()), (route) => false);
        Get.snackbar("Note", jsonResponse['msg']);
      } else {
        // prefs.setBool("isLogin", false);
        Get.snackbar("Error Note", jsonResponse['msg']);
      }
    } on SocketException catch (e) {
      Get.snackbar('Exception', e.toString());
    } on FormatException catch (e) {
      Get.snackbar('Exception', e.toString());
    } catch (e) {
      Get.snackbar('Exception', e.toString());
    }
  }


 */



}


